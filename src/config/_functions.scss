///////////////////////////////////////////////////////////
// get from map dedicated key
// only for ease of use instead of map-get
//
// if used with only two parameters of type string
// it will get a key from a map on a theme.
// (third argument could set the theme, if there are more than one).
// 
// else if two arguments and the first is a map
// it will return the key from this map
//
// @param {map|string} $map 
// @param {string} $key key name
// @return {*}
///////////////////////////////////////////////////////////
@function get($map, $key, $themeMap: $theme, $contrast: false) {

  @if type-of($map) == map and $contrast {
    @return map-get(map-get($map, contrast), $key);
  } @else if type-of($map) == map {
    @return map-get($map, $key);
  } 

  @if $contrast {
    @return map-get(map-get(map-get($themeMap, $map), contrast), $key);
  }

  @return map-get(map-get($themeMap, $map), $key);
}


///////////////////////////////////////////////////////////
// convert pixel to rem depending on html font size base.
// @param {number} $number in pixels.
// @param {number} $base html size base.
// @return {string}
///////////////////////////////////////////////////////////
@function pxToRem($number, $base: $font-size-base) {
  @return unquote('#{$number / $base}rem');
}


///////////////////////////////////////////////////////////
// remove dedicated item from a list
// @param {list} $list - list to be filtered
// @param {*} $value - value to be removed from the list
// @return {list} new filtered list.
///////////////////////////////////////////////////////////
@function filter($list, $value) {
  $result: ();

  @for $i from 1 through length($list) {
    $newList: ();

    @if nth($list, $i) != $value {
      $result: append($result, nth($list, $i), comma);
    }
  }
  @return $result;
}
